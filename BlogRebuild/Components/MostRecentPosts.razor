@using Data.Models.Entities

@if (_loadingInitial == false)
{
    @if (_posts != null && _posts.Count > 0)
    {
        <div class="first-banner">
            <div class="first-banner-post-content" @onclick='()=> { navigationManager.NavigateTo($"/post/{_posts.FirstOrDefault().Title.RemoveSpecialCharacter()}"); }'>
                <div class="img-wrapper">
                    <img src="@($"data:image/png;base64,{Convert.ToBase64String(_posts.FirstOrDefault().PhotoBanner)}")" class="first-banner-post" />
                </div>
                <div class="info-post-right">
                    <div class="purple-strip"><span>se liga no último post!</span></div>
                    <span>@_posts.FirstOrDefault().CategoryName</span>
                    <h1>@_posts.FirstOrDefault().Title</h1>
                    <AuthorSmall Photo="_posts.FirstOrDefault().AuthorPhoto" Name="@_posts.FirstOrDefault().AuthorName" Date="_posts.FirstOrDefault().Date"></AuthorSmall>
                </div>
            </div>
        </div>


        <div class="posts-content">

            @foreach (var post in _posts.TakeLast((_pagination.ItemPerPage * _pagination.Page) - 1).Where(x => x.Id != _posts.FirstOrDefault().Id))
            {
                <div class="post" @onclick='()=> { navigationManager.NavigateTo($"/post/{post.Title.RemoveSpecialCharacter()}"); }'>
                    <div class="post-category"><span>@post.CategoryName</span></div>
                    <div class="img-wrapper">
                        <img class="banner-post" src="@($"data:image/png;base64,{Convert.ToBase64String(post.PhotoBanner)}")" />
                    </div>
                    <span class="post-title">@post.Title</span>
                    <AuthorSmall Photo="post.AuthorPhoto" Name="@post.AuthorName" Date="post.Date"></AuthorSmall>
                </div>
            }

        </div>

        @if (_endOfPage == false)
        {
            <div class="load-more-content">
                <button onclick="@(async () => await LoadMore(++_pagination.Page))" disabled="@(_loadingLoadMore)">@(_loadingLoadMore ? "Carregando mais..." : "Carregar mais...")</button>
            </div>

        }
    }
    else
    {
        <div class=" flex-column align-items-center" style="display: flex; gap: 1rem;">
            <img src="./images/bill-gates.webp" style="width: 20rem; border-radius: 2rem;" />
            <h2> Não há posts a mostrar :(</h2>
        </div>
   
    }

}
else
{

    <div class="first-banner-post-content">
        <div class="first-banner-post loading-bg">
        </div>

        <div class="loading-bg info-first-post">
        </div>
    </div>

    <div class="posts-content">
        @for (int i = 0; i < CountPosts - 1; i++)
        {
            <div class="banner-post loading-bg blank"> </div>
        }
    </div>
}



@code {
    private List<MostRecentPostDTO> _posts = new List<MostRecentPostDTO>();
    private Pagination _pagination;
    private bool _loadingInitial = true;
    private bool _loadingLoadMore = false;
    private bool _endOfPage = false;

    [Parameter]
    public int CountPosts { get; set; }

    [Parameter]
    public string AuthorName { get; set; }

    [Parameter]
    public string CategoryName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadMore(1);
        _loadingInitial = false;
    }

    private async Task<List<MostRecentPostDTO>> GetMostRecentPosts()
    {
        var request = await new CrudService(new HttpClient()).Get($"{Endpoints.Post}/GetMostRecent", $"?page={_pagination.Page}&count={_pagination.ItemPerPage}");
        return JsonConvert.DeserializeObject<List<MostRecentPostDTO>>(await request.Content.ReadAsStringAsync());
    }

    private async Task<List<MostRecentPostDTO>> GetMostRecentPostsByAuthor()
    {
        var request = await new CrudService(new HttpClient()).Get($"{Endpoints.Author}/GetMostRecentPostsByFormattedName", $"?formattedName={AuthorName}&page={_pagination.Page}&count={_pagination.ItemPerPage}");
        return JsonConvert.DeserializeObject<List<MostRecentPostDTO>>(await request.Content.ReadAsStringAsync());
    }

    private async Task<List<MostRecentPostDTO>> GetMostRecentPostsByCategory()
    {
        var request = await new CrudService(new HttpClient()).Get($"{Endpoints.Category}/GetMostRecentPostsByFormattedName", $"?formattedName={CategoryName}&page={_pagination.Page}&count={_pagination.ItemPerPage}");
        return JsonConvert.DeserializeObject<List<MostRecentPostDTO>>(await request.Content.ReadAsStringAsync());
    }

    private async Task LoadMore(int page)
    {
        _loadingLoadMore = true;

        _pagination = new Pagination(page, CountPosts);

        var posts = new List<MostRecentPostDTO>();

        if (string.IsNullOrEmpty(AuthorName) == false)
        {
            posts = await GetMostRecentPostsByAuthor();
        }
        else if (string.IsNullOrEmpty(CategoryName) == false)
        {
            posts = await GetMostRecentPostsByCategory();
        }
        else
        {
            posts = await GetMostRecentPosts();
        }

        if (posts.Count < _pagination.ItemPerPage)
        {
            _endOfPage = true;
        }

        foreach (var post in posts)
        {
            _posts.Add(post);
        }

        _loadingLoadMore = false;
    }
}