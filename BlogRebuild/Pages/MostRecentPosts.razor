@using System.Text.RegularExpressions
@if (_posts != null)
{
    <div class="first-banner">
        <div class="first-banner-post-content">
            <img src="@($"data:image/png;base64,{Convert.ToBase64String(_posts.FirstOrDefault().PhotoBanner)}")" class="first-banner-post" />
            <div>
                <div class="purple-strip"><span>se liga no último artigo!</span></div>
                <span>@_posts.FirstOrDefault().CategoryName</span>
                <h1>@_posts.FirstOrDefault().Title</h1>
                <div class="info-post">
                    <img src="@($"data:image/png;base64,{Convert.ToBase64String(_posts.FirstOrDefault().AuthorPhoto)}")" />
                    <span>@_posts.FirstOrDefault().AuthorName</span>
                    <span>@_posts.FirstOrDefault().Date.ToString("dd/MM/yyyy")</span>
                </div>
            </div>
        </div>
    </div>


    <div class="posts-content">

        @foreach (var post in _posts.TakeLast(CountPosts - 1))
        {
            <div class="post" @onclick='()=> { navigationManager.NavigateTo($"/post/{post.Title.RemoveSpecialCharacter()}"); }'>
                <div class="post-category"><span>@post.CategoryName</span></div>
                <img class="banner-post" src="@($"data:image/png;base64,{Convert.ToBase64String(post.PhotoBanner)}")" />
                <span class="post-title">@post.Title</span>
                <div class="info-post">
                    <img src="@($"data:image/png;base64,{Convert.ToBase64String(post.AuthorPhoto)}")" />
                    <span>@post.AuthorName</span>
                    <span>@post.Date.ToString("dd/MM/yyyy")</span>
                </div>
            </div>
        }

    </div>
}
else
{

    <div class="first-banner-post-content">
        <div class="first-banner-post loading-bg">
        </div>

        <div class="loading-bg info-first-post">
        </div>
    </div>

    <div class="posts-content">
        @for (int i = 0; i < CountPosts - 1; i++)
        {
            <div class="post loading-bg blank"> </div>
        }
    </div>
}



@code {
    private List<MostRecentPostDTO> _posts;

    [Parameter]
    public int CountPosts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _posts = await GetMostRecentPosts();
    }

    private async Task<List<MostRecentPostDTO>> GetMostRecentPosts()
    {
        var request = await new CrudService(new HttpClient()).Get($"{Endpoints.Post}/GetMostRecent", $"?count={CountPosts}");
        return JsonConvert.DeserializeObject<List<MostRecentPostDTO>>(await request.Content.ReadAsStringAsync());
    }

}